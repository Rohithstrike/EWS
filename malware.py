import os
import hashlib
import yara
import requests
import json
import datetime
import pefile
import math

# Constants
YARA_RULES_PATH = "malware_rules.yar"  # Ensure you have YARA rules for scanning
VT_API_KEY = "200e69d30ccd0040516d6fefbfa75d9b21c39feb84eeab100d5f1d9f4c0cee04"  # Replace with your VirusTotal API key
VT_URL = "https://www.virustotal.com/vtapi/v2/file/report"
HYBRID_ANALYSIS_API_KEY = "xpu07z6z83fb267eh1y74hqf3e1039a9y8ijnub20a6f0367wn6wcy2q55671184"
HYBRID_ANALYSIS_URL = "https://www.hybrid-analysis.com/api/v2"

FILE_DIRECTORY = "malware/"

def get_file_hash(file_path):
    """Calculate the SHA256 hash of the file."""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def load_yara_rules():
    """Load YARA rules from a file."""
    try:
        rules = yara.compile(filepath=YARA_RULES_PATH)
        return rules
    except yara.SyntaxError as e:
        print(f"Error loading YARA rules: {e}")
        return None

def scan_file_with_yara(file_path, rules):
    """Scan a file using YARA rules."""
    try:
        matches = rules.match(file_path)
        return [str(match) for match in matches] if matches else []
    except Exception as e:
        print(f"Error scanning file with YARA: {e}")
        return []

def query_virustotal(file_hash):
    """Query VirusTotal for a file hash."""
    params = {"apikey": VT_API_KEY, "resource": file_hash}
    try:
        response = requests.get(VT_URL, params=params)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 403:
            print("VirusTotal API quota exceeded or invalid API key.")
        else:
            print(f"VirusTotal query failed with status code {response.status_code}")
        return None
    except Exception as e:
        print(f"Error querying VirusTotal: {e}")
        return None

def query_hybrid_analysis(file_hash):
    """Query Hybrid Analysis for a file hash."""
    url = f"{HYBRID_ANALYSIS_URL}/search/hash/{file_hash}"
    headers = {
        "API-Key": HYBRID_ANALYSIS_API_KEY,
        "Content-Type": "application/json"
    }
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Hybrid Analysis query failed with status code {response.status_code}")
        return None
    except Exception as e:
        print(f"Error querying Hybrid Analysis: {e}")
        return None

def analyze_virustotal_results(vt_data):
    """Analyze VirusTotal results."""
    if not vt_data or vt_data.get("response_code") == 0:
        return {"summary": "Not found on VirusTotal.", "malicious": 0, "undetected": 0, "top_engines": []}

    malicious = vt_data.get("positives", 0)
    total = vt_data.get("total", 0)
    undetected = total - malicious
    top_engines = [f"{scan}: {result['result']}" for scan, result in vt_data.get("scans", {}).items() if result.get("detected")]

    return {"summary": f"Malicious: {malicious}, Undetected: {undetected}", "malicious": malicious, "undetected": undetected, "top_engines": top_engines[:10]}

def analyze_hybrid_analysis_results(ha_data):
    """Analyze Hybrid Analysis results."""
    if not ha_data:
        return {"summary": "No results found on Hybrid Analysis.", "malicious": 0, "details": []}

    malicious = ha_data.get("malicious", 0)
    details = ha_data.get("result", {}).get("details", [])

    return {
        "summary": f"Malicious: {malicious}",
        "malicious": malicious,
        "details": details
    }

def get_file_metadata(file_path):
    """Retrieve basic file metadata."""
    file_size = os.path.getsize(file_path)
    creation_time = os.path.getctime(file_path)
    creation_date = datetime.datetime.fromtimestamp(creation_time)
    return {"file_size": file_size, "creation_date": creation_date}

def calculate_entropy(file_path):
    """Calculate file entropy for heuristic analysis."""
    with open(file_path, 'rb') as f:
        byte_arr = list(f.read())
        file_size = len(byte_arr)

        if file_size == 0:
            return 0.0

        freq_list = [byte_arr.count(b) / file_size for b in range(256)]
        entropy = -sum(freq * math.log(freq, 2) for freq in freq_list if freq > 0)
        return entropy

def analyze_pe_file(file_path):
    """Analyze Portable Executable (PE) files for suspicious behavior."""
    try:
        pe = pefile.PE(file_path)
        suspicious_sections = []
        for section in pe.sections:
            entropy = section.get_entropy()
            if entropy > 7.0 or entropy < 1.0:
                suspicious_sections.append(f"Suspicious section: {section.Name.decode().strip()} (Entropy: {entropy:.2f})")

        imports = [entry.dll.decode() for entry in pe.DIRECTORY_ENTRY_IMPORT] if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else []
        if any(lib in imports for lib in ["kernel32.dll", "ntdll.dll"]):
            suspicious_sections.append("Imports critical system libraries (e.g., kernel32.dll)")

        return suspicious_sections
    except Exception as e:
        print(f"Error analyzing PE file: {e}")
        return []

def heuristic_analysis(file_metadata, entropy):
    """Perform heuristic analysis when VirusTotal fails."""
    if file_metadata["file_size"] < 100:
        return "File size unusually small. Suspicious."
    elif entropy > 7.0:
        return "High entropy detected. Possible obfuscation."
    elif file_metadata["file_size"] > 1000000:  # 1MB threshold
        return "Large file size. Might be packed or contain additional data."
    else:
        return "No immediate heuristic concerns."

def determine_risk_level(vt_results, ha_results, yara_matches, pe_analysis):
    """Determine the final risk level based on all analyses."""
    if vt_results["malicious"] > 0 or ha_results["malicious"] > 0 or yara_matches or pe_analysis:
        return "HIGH", "Immediate action recommended."
    elif vt_results["undetected"] > 0 or ha_results["malicious"] == 0:
        return "MEDIUM", "Review required."
    else:
        return "LOW", "No action needed."

def analyze_file(file_name):
    """Main analysis function for a given file."""
    file_path = os.path.join(FILE_DIRECTORY, file_name.strip())
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        return

    print(f"Scanning file: {file_path}")
    
    yara_rules = load_yara_rules()
    yara_matches = scan_file_with_yara(file_path, yara_rules) if yara_rules else []

    file_hash = get_file_hash(file_path)
    print(f"File hash: {file_hash}")

    # Query VirusTotal
    vt_data = query_virustotal(file_hash)
    vt_results = analyze_virustotal_results(vt_data)

    # Query Hybrid Analysis
    ha_data = query_hybrid_analysis(file_hash)
    ha_results = analyze_hybrid_analysis_results(ha_data)

    # File Metadata
    file_metadata = get_file_metadata(file_path)
    entropy = calculate_entropy(file_path)

    # PE Analysis
    pe_analysis = analyze_pe_file(file_path)
    heuristic_result = heuristic_analysis(file_metadata, entropy)

    # Determine risk level
    risk_level, recommendation = determine_risk_level(vt_results, ha_results, yara_matches, pe_analysis)

    # Display results
    print("\n--- YARA Analysis ---")
    print(f"YARA Matches: {', '.join(yara_matches) if yara_matches else 'None'}")
    
    print("\n--- VirusTotal Results ---")
    print(f"VirusTotal Summary: {vt_results['summary']}")
    if vt_results['top_engines']:
        print("VirusTotal Top Engines:")
        for engine in vt_results['top_engines']:
            print(engine)

    print("\n--- Hybrid Analysis Results ---")
    print(f"Hybrid Analysis Summary: {ha_results['summary']}")
    if ha_results['details']:
        print("Hybrid Analysis Details:")
        for detail in ha_results['details']:
            print(detail)

    print(f"\n--- PE Analysis ---")
    print(f"PE Analysis: {', '.join(pe_analysis) if pe_analysis else 'No suspicious sections found.'}")

    print(f"\n--- Heuristic Analysis ---")
    print(f"Heuristic Analysis Result: {heuristic_result}")
    print(f"\nFinal Risk Level: {risk_level}")
    print(f"Recommended Action: {recommendation}")

if __name__ == "__main__":
    file_name = input("Enter the name of the file to scan (e.g., malware.exe): ")
    analyze_file(file_name)
