import os
import hashlib
import yara
import requests
import json
import datetime
import math

# Constants
YARA_RULES_PATH = "malware_rules.yar"
VT_API_KEY = "200e69d30ccd0040516d6fefbfa75d9b21c39feb84eeab100d5f1d9f4c0cee04"  # Replace with your VirusTotal API key
VT_URL = "https://www.virustotal.com/vtapi/v2/file/report"
METASCAN_API_KEY = "a70a918591b8c4efb841224032eeee97"  # Replace with your MetaDefender API key
METASCAN_URL = "https://api.metadefender.com/v4/hash"
FILE_DIRECTORY = "malware/"

def get_file_hash(file_path):
    """Calculate the SHA256 hash of the file."""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def load_yara_rules():
    """Load YARA rules from a file."""
    try:
        rules = yara.compile(filepath=YARA_RULES_PATH)
        return rules
    except yara.SyntaxError as e:
        print(f"Error loading YARA rules: {e}")
        return None

def scan_file_with_yara(file_path, rules):
    """Scan a file using YARA rules."""
    try:
        matches = rules.match(file_path)
        return matches if matches else []
    except Exception as e:
        print(f"Error scanning file with YARA: {e}")
        return []

def query_virustotal(file_hash):
    """Query VirusTotal for a file hash."""
    params = {"apikey": VT_API_KEY, "resource": file_hash}
    try:
        response = requests.get(VT_URL, params=params)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 403:
            print("VirusTotal API quota exceeded or invalid API key.")
        else:
            print(f"VirusTotal query failed with status code {response.status_code}")
        return None
    except Exception as e:
        print(f"Error querying VirusTotal: {e}")
        return None

def query_metadefender(file_hash):
    """Query MetaDefender for a file hash."""
    headers = {
        "apikey": METASCAN_API_KEY,
        "Content-Type": "application/json"
    }
    url = f"{METASCAN_URL}/{file_hash}"
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"MetaDefender query failed with status code {response.status_code}")
        return None
    except Exception as e:
        print(f"Error querying MetaDefender: {e}")
        return None

def analyze_virustotal_results(vt_data):
    """Analyze VirusTotal results."""
    if not vt_data or vt_data.get("response_code") == 0:
        return {"summary": "Not found on VirusTotal.", "malicious": 0, "undetected": 0, "top_engines": []}

    malicious = vt_data.get("positives", 0)
    total = vt_data.get("total", 0)
    undetected = total - malicious
    top_engines = [f"{scan}: {result['result']}" for scan, result in vt_data.get("scans", {}).items() if result.get("detected")]

    return {"summary": f"Malicious: {malicious}, Undetected: {undetected}", "malicious": malicious, "undetected": undetected, "top_engines": top_engines[:10]}

def analyze_metadefender_results(md_data):
    """Analyze MetaDefender results."""
    if not md_data:
        return {"summary": "No results found on MetaDefender.", "malicious": 0, "details": []}

    findings = md_data.get("scan_results", {}).get("total_detected_avs", 0)
    scan_details = md_data.get("scan_results", {}).get("scan_details", {})
    details = [
        f"{engine.get('engine_name', 'Unknown')}: {engine.get('threat_found', 'No threat found')}"
        for engine in scan_details.values()
        if engine.get("threat_found")
    ]

    return {
        "summary": f"Malicious detections: {findings}",
        "malicious": findings,
        "details": details[:10]
    }

def get_file_metadata(file_path):
    """Retrieve basic file metadata."""
    file_size = os.path.getsize(file_path)
    creation_time = os.path.getctime(file_path)
    creation_date = datetime.datetime.fromtimestamp(creation_time)
    return {"file_size": file_size, "creation_date": creation_date}

def calculate_entropy(file_path):
    """Calculate file entropy for heuristic analysis."""
    with open(file_path, 'rb') as f:
        byte_arr = list(f.read())
        file_size = len(byte_arr)

        if file_size == 0:
            return 0.0

        freq_list = [byte_arr.count(b) / file_size for b in range(256)]
        entropy = -sum(freq * math.log(freq, 2) for freq in freq_list if freq > 0)
        return entropy

def heuristic_analysis(file_metadata, entropy):
    """Perform heuristic analysis."""
    file_size = file_metadata["file_size"]
    
    if file_size < 10:  # Very small file size
        return "File is too small. Likely benign."
    elif file_size < 100:  # Small file size
        return "File size unusually small. Suspicious."
    elif entropy > 7.0:  # High entropy indicating potential obfuscation
        return "High entropy detected. Possible obfuscation."
    elif file_size > 1000000:  # Large files could be packed
        return "Large file size. Might be packed or contain additional data."
    else:
        return "No immediate heuristic concerns."

def determine_risk_level(vt_results, md_results, yara_matches):
    # Check if any YARA rules matched
    malicious_found = any(
        match.rule for match in yara_matches if "malicious" in match.rule.lower() or "high" in match.rule.lower()
    )

    # Check if any low-risk YARA rules matched
    low_risk_found = any(
        match.rule for match in yara_matches if "low" in match.rule.lower()
    )

    # Define a default risk level and recommendation
    risk_level = "LOW"  # Default to low if nothing else is found
    recommendation = "No action needed."

    # Check VirusTotal results
    if vt_results and vt_results.get('positives', 0) > 0:
        risk_level = "HIGH"
        recommendation = "Immediate action recommended based on VirusTotal results."

    # Check MetaDefender results
    if md_results and md_results.get('status') != 'success':
        risk_level = "MEDIUM"
        recommendation = "Moderate action recommended based on MetaDefender results."

    # If low-risk rule matches but no malicious findings, we can maintain a low risk
    if low_risk_found and not malicious_found:
        risk_level = "LOW"
        recommendation = "File is detected as low-risk."

    # If any malicious YARA rules matched
    if malicious_found:
        risk_level = "HIGH"
        recommendation = "Immediate action recommended based on YARA matches."

    return risk_level, recommendation

def analyze_file(file_name):
    """Main analysis function for a given file."""
    file_path = os.path.join(FILE_DIRECTORY, file_name.strip())
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        return

    print(f"Scanning file: {file_path}")
    
    yara_rules = load_yara_rules()
    yara_matches = scan_file_with_yara(file_path, yara_rules) if yara_rules else []

    file_hash = get_file_hash(file_path)
    print(f"File hash: {file_hash}")

    vt_data = query_virustotal(file_hash) if os.path.getsize(file_path) > 0 else None
    vt_results = analyze_virustotal_results(vt_data) if vt_data else {"summary": "No VirusTotal results due to local file.", "malicious": 0, "undetected": 0, "top_engines": []}

    md_data = query_metadefender(file_hash) if os.path.getsize(file_path) > 0 else None
    md_results = analyze_metadefender_results(md_data) if md_data else {"summary": "No MetaDefender results due to local file.", "malicious": 0, "details": []}

    file_metadata = get_file_metadata(file_path)
    entropy = calculate_entropy(file_path)

    heuristic_result = heuristic_analysis(file_metadata, entropy)

    risk_level, recommendation = determine_risk_level(vt_results, md_results, yara_matches)

    # Display results
    print("\n--- YARA Analysis ---")
    print(f"YARA Matches: {', '.join(str(match) for match in yara_matches) if yara_matches else 'None'}")
    
    print("\n--- VirusTotal Results ---")
    print(f"VirusTotal Summary: {vt_results['summary']}")
    if vt_results['top_engines']:
        print("VirusTotal Top Engines:")
        for engine in vt_results['top_engines']:
            print(engine)

    print("\n--- MetaDefender Results ---")
    print(f"MetaDefender Summary: {md_results['summary']}")
    if md_results['details']:
        print("MetaDefender Details:")
        for detail in md_results['details']:
            print(detail)

    print(f"\n--- Heuristic Analysis ---")
    print(f"Heuristic Analysis Result: {heuristic_result}")

    print(f"\n--- Final Risk Assessment ---")
    print(f"Risk Level: {risk_level}")
    print(f"Recommendation: {recommendation}")

if __name__ == "__main__":
    # User input for file name
    file_name_input = input("Enter the malware file name (e.g., malware.exe): ")
    analyze_file(file_name_input)