import os
import hashlib
import yara
import requests
import json
import datetime
import math
import time  # Import time for sleep functionality

# Constants
YARA_RULES_PATH = "malware_rules.yar"
VT_API_KEY = "200e69d30ccd0040516d6fefbfa75d9b21c39feb84eeab100d5f1d9f4c0cee04"  # VirusTotal API key
VT_URL = "https://www.virustotal.com/vtapi/v2/file/report"
METASCAN_API_KEY = "a70a918591b8c4efb841224032eeee97"  # MetaDefender API key
METASCAN_URL = "https://api.metadefender.com/v4/hash"
FILE_DIRECTORY = "malware/"

def get_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def query_virustotal(file_hash):
    params = {"apikey": VT_API_KEY, "resource": file_hash}
    try:
        response = requests.get(VT_URL, params=params)
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        print(f"Error querying VirusTotal: {e}")
        return None

def query_metadefender(file_hash):
    headers = {"apikey": METASCAN_API_KEY, "Content-Type": "application/json"}
    try:
        response = requests.get(f"{METASCAN_URL}/{file_hash}", headers=headers)
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        print(f"Error querying MetaDefender: {e}")
        return None

def analyze_virustotal_results(vt_data):
    if not vt_data or vt_data.get("response_code") == 0:
        return {"summary": "Not found on VirusTotal.", "malicious": 0, "undetected": 0, "top_engines": []}
    malicious = vt_data.get("positives", 0)
    total = vt_data.get("total", 0)
    undetected = total - malicious
    top_engines = [f"{scan}: {result['result']}" for scan, result in vt_data.get("scans", {}).items() if result.get("detected")]
    return {"summary": f"Malicious: {malicious}, Undetected: {undetected}", "malicious": malicious, "undetected": undetected, "top_engines": top_engines[:10]}

def analyze_metadefender_results(md_data):
    if not md_data:
        return {"summary": "No results found on MetaDefender.", "malicious": 0, "details": []}
    findings = md_data.get("scan_results", {}).get("total_detected_avs", 0)
    scan_details = md_data.get("scan_results", {}).get("scan_details", {})
    details = [f"{engine.get('engine_name', 'Unknown')}: {engine.get('threat_found', 'No threat found')}" for engine in scan_details.values() if engine.get("threat_found")]
    return {"summary": f"Malicious detections: {findings}", "malicious": findings, "details": details[:10]}

def get_file_metadata(file_path):
    file_size = os.path.getsize(file_path)
    creation_time = os.path.getctime(file_path)
    creation_date = datetime.datetime.fromtimestamp(creation_time)
    return {"file_size": file_size, "creation_date": creation_date}

def calculate_entropy(file_path):
    with open(file_path, 'rb') as f:
        byte_arr = list(f.read())
        file_size = len(byte_arr)
        if file_size == 0:
            return 0.0
        freq_list = [byte_arr.count(b) / file_size for b in range(256)]
        entropy = -sum(freq * math.log(freq, 2) for freq in freq_list if freq > 0)
        return entropy

def heuristic_analysis(file_metadata, entropy):
    file_size = file_metadata["file_size"]
    if file_size < 10:
        return "File is too small. Likely benign."
    elif file_size < 100:
        return "File size unusually small. Suspicious."
    elif entropy > 7.0:
        return "High entropy detected. Possible obfuscation."
    elif file_size > 1000000:
        return "Large file size. Might be packed or contain additional data."
    else:
        return "No immediate heuristic concerns."

def determine_risk_level(vt_results, md_results):
    risk_level = "LOW"
    recommendation = "No action needed."
    if vt_results and vt_results.get('malicious', 0) > 0:
        risk_level = "HIGH"
        recommendation = "Immediate action recommended based on VirusTotal results."
    elif md_results and md_results.get('malicious', 0) > 0:
        risk_level = "MEDIUM"
        recommendation = "Moderate action recommended based on MetaDefender results."
    return risk_level, recommendation

def analyze_file(file_name):
    file_path = os.path.join(FILE_DIRECTORY, file_name.strip())
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        return

    print("Loading...")  # Loading message
    time.sleep(2)  # Delay for 2 seconds

    print(f"\n--- Stage 1: File Analysis ---")
    print(f"Scanning file: {file_path}")

    file_hash = get_file_hash(file_path)
    print(f"File hash: {file_hash}")

    vt_data = query_virustotal(file_hash) if os.path.getsize(file_path) > 0 else None
    vt_results = analyze_virustotal_results(vt_data) if vt_data else {"summary": "No VirusTotal results due to local file.", "malicious": 0, "undetected": 0, "top_engines": []}

    md_data = query_metadefender(file_hash) if os.path.getsize(file_path) > 0 else None
    md_results = analyze_metadefender_results(md_data) if md_data else {"summary": "No MetaDefender results due to local file.", "malicious": 0, "details": []}

    file_metadata = get_file_metadata(file_path)
    entropy = calculate_entropy(file_path)
    heuristic_result = heuristic_analysis(file_metadata, entropy)

    time.sleep(3)  # Delay for 3 seconds before Stage 2
    print("\n--- Stage 2: VirusTotal Results ---")
    print(f"VirusTotal Summary: {vt_results['summary']}")
    if vt_results['top_engines']:
        print("VirusTotal Top Engines:")
        for engine in vt_results['top_engines']:
            print(engine)

    time.sleep(3)  # Delay for 3 seconds before Stage 3
    print("\n--- Stage 3: MetaDefender Results ---")
    print(f"MetaDefender Summary: {md_results['summary']}")
    if md_results['details']:
        print("MetaDefender Details:")
        for detail in md_results['details']:
            print(detail)

    time.sleep(3)  # Delay for 3 seconds before Stage 4
    print("\n--- Stage 4: Heuristic Analysis ---")
    print(f"Heuristic Analysis Result: {heuristic_result}")

    time.sleep(3)  # Delay for 3 seconds before Stage 5
    print("\n--- Stage 5: Final Risk Assessment ---")
    risk_level, recommendation = determine_risk_level(vt_results, md_results)
    print(f"Risk Level: {risk_level}")
    print(f"Recommendation: {recommendation}")

if __name__ == "__main__":
    file_name_input = input("Enter the malware file name (e.g., malware.exe): ")
    analyze_file(file_name_input)
