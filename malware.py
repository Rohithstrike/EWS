import yara
import hashlib
import os
import requests
import time

# Your VirusTotal API Key
API_KEY = "200e69d30ccd0040516d6fefbfa75d9b21c39feb84eeab100d5f1d9f4c0cee04"
VT_URL = "https://www.virustotal.com/api/v3/files/{}"

# Load YARA rules
RULES_PATH = "malware_rules.yar"
try:
    rules = yara.compile(filepath=RULES_PATH)
except yara.Error as e:
    print(f"Error loading YARA rules: {e}")
    exit(1)

# Enhanced risk rating dictionary with recommendations
RISK_RATING = {
    "very_low": "No action needed.",
    "low": "Monitor the file. No immediate action needed.",
    "medium": "Investigate and restrict file access.",
    "elevated": "Isolate the system for further analysis.",
    "high": "Isolate the system and perform malware removal.",
    "very_high": "Immediate action required. Consult security experts.",
    "critical": "Severe threat. System compromised. Disconnect immediately."
}

# Function to calculate SHA-256 hash of a file
def calculate_sha256(file_path):
    try:
        with open(file_path, "rb") as f:
            file_data = f.read()
        return hashlib.sha256(file_data).hexdigest()
    except FileNotFoundError:
        print(f"File not found: {file_path}")
        return None
    except Exception as e:
        print(f"Error calculating hash for {file_path}: {e}")
        return None

# Function to scan a file with YARA rules
def scan_with_yara(file_path):
    try:
        matches = rules.match(file_path)
        if matches:
            severity = matches[0].meta.get("severity", "medium")
            print(f"YARA detected: {matches[0].rule}, Severity: {severity}")
            return severity
        else:
            print("No suspicious patterns detected with YARA.")
            return "very_low"
    except yara.Error as e:
        print(f"Error scanning with YARA: {e}")
        return "medium"

# Function to check file hash on VirusTotal
def check_virustotal(file_hash):
    headers = {"x-apikey": API_KEY}
    try:
        response = requests.get(VT_URL.format(file_hash), headers=headers)

        if response.status_code == 200:
            data = response.json()
            stats = data["data"]["attributes"]["last_analysis_stats"]
            detailed_info = data["data"]["attributes"]["last_analysis_results"]

            print(f"\nVirusTotal Results Summary:")
            print(f"Malicious: {stats['malicious']}, Suspicious: {stats['suspicious']}")
            print(f"Undetected: {stats['undetected']}, Harmless: {stats['harmless']}")
            return stats, detailed_info
        elif response.status_code == 429:
            print("Rate limit exceeded. Retrying in 60 seconds...")
            time.sleep(60)
            return check_virustotal(file_hash)
        elif response.status_code == 404:
            print(f"File hash {file_hash} not found on VirusTotal.")
            return None, None
        else:
            print(f"Failed to query VirusTotal: HTTP {response.status_code}")
            return None, None
    except requests.RequestException as e:
        print(f"Error querying VirusTotal: {e}")
        return None, None

# Function to scan the file and provide recommendations
def detect_malware(file_path):
    print(f"Scanning file: {file_path}")

    # Step 1: YARA Scan
    yara_severity = scan_with_yara(file_path)

    # Step 2: Calculate SHA-256 hash and check VirusTotal
    file_hash = calculate_sha256(file_path)
    if file_hash is None:
        print("Cannot calculate hash, skipping VirusTotal scan.")
        return

    vt_stats, vt_details = check_virustotal(file_hash)

    if vt_stats is None:
        print(f"VirusTotal query failed for {file_path}. File may not exist in the VirusTotal database.")
        return

    # Determine final risk level based on VirusTotal results
    if vt_stats["malicious"] > 0:
        final_severity = "critical"
    elif vt_stats["suspicious"] > 0:
        final_severity = "elevated"
    else:
        final_severity = yara_severity  # Use YARA severity if no malicious/suspicious found

    print(f"\nFinal Risk Level: {final_severity.upper()}")
    print(f"Recommended Action: {RISK_RATING.get(final_severity, 'No action needed.')}\n")

    # Step 3: Detailed Analysis
    if vt_details:
        print("Detailed VirusTotal Results (Top 10 Engines):")
        count = 0
        for engine, result in vt_details.items():
            if count >= 10:
                break
            if result['category'] in ['malicious', 'suspicious']:
                print(f"{engine}: {result['category'].upper()} - {result['result']}")
                count += 1

        if count == 0:
            print("No malicious results found by top engines.")

# Function to scan multiple files
def scan_multiple_files(file_paths):
    for file_path in file_paths:
        if os.path.exists(file_path):
            detect_malware(file_path)
        else:
            print(f"File not found: {file_path}")

# Run the detection on a sample file
if __name__ == "__main__":
    files_to_scan = input("Enter the paths to the files you want to scan (comma-separated): ").strip().split(',')
    scan_multiple_files([file.strip() for file in files_to_scan])
