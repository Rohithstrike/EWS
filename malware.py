import os
import hashlib
import yara
import requests
import json
import datetime
import math
import time  # Import time for sleep functionality
import sys  # Import sys for flushing output
import pyfiglet
from termcolor import colored

# Constants
YARA_RULES_PATH = "malware_rules.yar"
VT_API_KEY = "200e69d30ccd0040516d6fefbfa75d9b21c39feb84eeab100d5f1d9f4c0cee04"  # VirusTotal API key
METASCAN_API_KEY = "a70a918591b8c4efb841224032eeee97"  # MetaDefender API key
METASCAN_URL = "https://api.metadefender.com/v4/hash"
FILE_DIRECTORY = "malware/"


# Create a bold thick banner
banner = pyfiglet.figlet_format("Project Malware X", font="big")
print(banner)


# Add a function for the loading animation
def loading_animation():
    animation = ["|", "/", "-", "\\"]
    for _ in range(5):
        for frame in animation:
            sys.stdout.write(f"\rLoading {frame}")
            sys.stdout.flush()
            time.sleep(0.2)

def get_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def query_virustotal(file_hash):
    params = {"apikey": VT_API_KEY, "resource": file_hash}
    try:
        response = requests.get(VT_URL, params=params)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 404:
            print("File not found on VirusTotal.")
        else:
            print(f"Error: Received unexpected status code {response.status_code} from VirusTotal.")
    except requests.exceptions.RequestException as e:
        print(f"Error querying VirusTotal: {e}")
    return None

def query_metadefender(file_hash):
    headers = {"apikey": METASCAN_API_KEY, "Content-Type": "application/json"}
    try:
        response = requests.get(f"{METASCAN_URL}/{file_hash}", headers=headers)
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        print(f"Error querying MetaDefender: {e}")
        return None

def analyze_virustotal_results(vt_data):
    if not vt_data or vt_data.get("response_code") == 0:
        return {"summary": "Not found on VirusTotal.", "malicious": 0, "undetected": 0, "top_engines": []}
    malicious = vt_data.get("positives", 0)
    total = vt_data.get("total", 0)
    undetected = total - malicious
    top_engines = [f"{scan}: {result['result']}" for scan, result in vt_data.get("scans", {}).items() if result.get("detected")]
    return {"summary": f"Malicious: {malicious}, Undetected: {undetected}", "malicious": malicious, "undetected": undetected, "top_engines": top_engines[:10]}

def analyze_metadefender_results(md_data):
    if not md_data:
        return {"summary": "No results found on MetaDefender.", "malicious": 0, "details": []}
    findings = md_data.get("scan_results", {}).get("total_detected_avs", 0)
    scan_details = md_data.get("scan_results", {}).get("scan_details", {})
    details = [f"{engine.get('engine_name', 'Unknown')}: {engine.get('threat_found', 'No threat found')}" for engine in scan_details.values() if engine.get("threat_found")]
    return {"summary": f"Malicious detections: {findings}", "malicious": findings, "details": details[:10]}

def get_file_metadata(file_path):
    file_size = os.path.getsize(file_path)
    creation_time = os.path.getctime(file_path)
    creation_date = datetime.datetime.fromtimestamp(creation_time)
    return {"file_size": file_size, "creation_date": creation_date}

def calculate_entropy(file_path):
    with open(file_path, 'rb') as f:
        byte_arr = list(f.read())
        file_size = len(byte_arr)
        if file_size == 0:
            return 0.0
        freq_list = [byte_arr.count(b) / file_size for b in range(256)]
        entropy = -sum(freq * math.log(freq, 2) for freq in freq_list if freq > 0)
        return entropy

def heuristic_analysis(file_metadata, entropy):
    file_size = file_metadata["file_size"]
    if file_size < 10:
        return "File is too small. Likely benign."
    elif file_size < 100:
        return "File size unusually small. Suspicious."
    elif entropy > 7.0:
        return "High entropy detected. Possible obfuscation."
    elif file_size > 1000000:
        return "Large file size. Might be packed or contain additional data."
    else:
        return "No immediate heuristic concerns."

def determine_risk_level(vt_results, md_results):
    risk_level = "LOW"
    recommendation = "No action needed."
    if vt_results and vt_results.get('malicious', 0) > 0:
        risk_level = "HIGH"
        recommendation = "Immediate action recommended based on VirusTotal results."
    elif md_results and md_results.get('malicious', 0) > 0:
        risk_level = "MEDIUM"
        recommendation = "Moderate action recommended based on MetaDefender results."
    return risk_level, recommendation



def analyze_file(file_name):
    file_path = os.path.join(FILE_DIRECTORY, file_name.strip())
    if not os.path.exists(file_path):
        print(f"\033[91mFile not found: {file_path}\033[0m")
        return

    loading_animation()

    # Stage 1: File Analysis
    print("\033[96m\n--- Stage 1: File Analysis ---\033[0m")
    print("=" * 40)
    print(f"\033[93mScanning file:\033[0m {file_path}")

    file_hash = get_file_hash(file_path)
    print(f"\033[94mFile hash:\033[0m {file_hash}")

    vt_data = query_virustotal(file_hash) if os.path.getsize(file_path) > 0 else None
    vt_results = analyze_virustotal_results(vt_data) if vt_data else {"summary": "\033[93mNo VirusTotal results due to local file.\033[0m", "malicious": 0, "undetected": 0, "top_engines": []}

    md_data = query_metadefender(file_hash) if os.path.getsize(file_path) > 0 else None
    md_results = analyze_metadefender_results(md_data) if md_data else {"summary": "\033[93mNo MetaDefender results due to local file.\033[0m", "malicious": 0, "details": []}

    file_metadata = get_file_metadata(file_path)
    entropy = calculate_entropy(file_path)
    heuristic_result = heuristic_analysis(file_metadata, entropy)

    # Stage 2: VirusTotal Results
    time.sleep(3)
    print("\033[96m\n--- Stage 2: VirusTotal Results ---\033[0m")
    print("=" * 40)
    print(f"\033[93mVirusTotal Summary:\033[0m {vt_results['summary']}")
    if vt_results['top_engines']:
        print("\033[93mVirusTotal Top Engines:\033[0m")
        for engine in vt_results['top_engines']:
            print(f"\033[91m{engine}\033[0m")

    # Stage 3: MetaDefender Results
    time.sleep(3)
    print("\033[96m\n--- Stage 3: MetaDefender Results ---\033[0m")
    print("=" * 40)
    print(f"\033[93mMetaDefender Summary:\033[0m {md_results['summary']}")
    if md_results['details']:
        print("\033[93mMetaDefender Details:\033[0m")
        for detail in md_results['details']:
            print(f"\033[91m{detail}\033[0m")

    # Stage 4: Heuristic Analysis
    time.sleep(3)
    print("\033[96m\n--- Stage 4: Heuristic Analysis ---\033[0m")
    print("=" * 40)
    print(f"\033[94mHeuristic Analysis Result:\033[0m {heuristic_result}")

    # Stage 5: Final Risk Assessment
    time.sleep(3)
    print("\033[96m\n--- Stage 5: Final Risk Assessment ---\033[0m")
    print("=" * 40)
    risk_level, recommendation = determine_risk_level(vt_results, md_results)
    print(f"\033[91mRisk Level:\033[0m {risk_level}")
    print(f"\033[93mRecommendation:\033[0m {recommendation}")


if __name__ == "__main__":
    choice = input("Choose analysis type (1 for Malware File, 2 for Malicious URL): ")
    if choice == "1":
        file_name_input = input("Enter the file name to analyze (in malware directory): ")
        analyze_file(file_name_input)
    elif choice == "2":
        url_input = input("Enter the URL to analyze: ")
        analyze_url(url_input)
    else:
        print("Invalid choice. Exiting.")