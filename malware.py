import os
import hashlib
import yara
import requests
import json
import datetime

# Constants
YARA_RULES_PATH = "malware_rules.yar"
VT_API_KEY = "your_virustotal_api_key"
VT_URL = "https://www.virustotal.com/vtapi/v2/file/report"
FILE_DIRECTORY = "malware/"

def get_file_hash(file_path):
    """Calculate the SHA256 hash of the file."""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def load_yara_rules():
    """Load YARA rules from a file."""
    try:
        rules = yara.compile(filepath=YARA_RULES_PATH)
        return rules
    except yara.SyntaxError as e:
        print(f"Error loading YARA rules: {e}")
        return None

def scan_file_with_yara(file_path, rules):
    """Scan a file using YARA rules."""
    try:
        matches = rules.match(file_path)
        if matches:
            return [str(match) for match in matches]
        else:
            return []
    except Exception as e:
        print(f"Error scanning file with YARA: {e}")
        return []

def query_virustotal(file_hash):
    """Query VirusTotal for a file hash."""
    params = {"apikey": VT_API_KEY, "resource": file_hash}
    try:
        response = requests.get(VT_URL, params=params)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 403:
            print("VirusTotal API quota exceeded or invalid API key. Please check your key or wait.")
        else:
            print(f"VirusTotal query failed with status code {response.status_code}")
        return None
    except Exception as e:
        print(f"Error querying VirusTotal: {e}")
        return None

def analyze_virustotal_results(vt_data):
    """Analyze and summarize VirusTotal results."""
    if vt_data is None or vt_data.get("response_code") == 0:
        return {
            "summary": "File not found on VirusTotal.",
            "malicious": 0,
            "suspicious": 0,
            "undetected": 0,
            "harmless": 0,
            "top_engines": []
        }
    
    malicious = vt_data.get("positives", 0)
    total = vt_data.get("total", 0)
    undetected = total - malicious
    top_engines = []

    for scan, result in vt_data.get("scans", {}).items():
        if result.get("detected"):
            top_engines.append(f"{scan}: {result['result']}")

    return {
        "summary": f"Malicious: {malicious}, Undetected: {undetected}",
        "malicious": malicious,
        "undetected": undetected,
        "top_engines": top_engines[:10]  # Show top 10 results
    }

def get_file_metadata(file_path):
    """Retrieve basic file metadata."""
    file_size = os.path.getsize(file_path)
    creation_time = os.path.getctime(file_path)
    creation_date = datetime.datetime.fromtimestamp(creation_time)
    return {
        "file_size": file_size,
        "creation_date": creation_date
    }

def heuristic_analysis(file_metadata):
    """Perform basic heuristic analysis when VirusTotal fails."""
    if file_metadata["file_size"] > 1000000:  # 1MB threshold as an example
        return "File size unusually large, might be suspicious."
    return "No immediate heuristic concerns."

def analyze_file(file_name):
    """Main analysis function for a given file."""
    file_path = os.path.join(FILE_DIRECTORY, file_name.strip())
    
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        return

    print(f"Scanning file: {file_path}")
    
    # Load YARA rules
    yara_rules = load_yara_rules()
    
    # YARA Scan
    yara_matches = scan_file_with_yara(file_path, yara_rules) if yara_rules else []
    
    if yara_matches:
        print(f"Suspicious patterns detected with YARA: {', '.join(yara_matches)}")
    else:
        print("No suspicious patterns detected with YARA.")
    
    # File Hashing
    file_hash = get_file_hash(file_path)
    print(f"File hash: {file_hash}")
    
    # VirusTotal Query
    vt_data = query_virustotal(file_hash)
    vt_results = analyze_virustotal_results(vt_data)

    print(f"\nVirusTotal Results Summary:\n{vt_results['summary']}")
    
    if vt_results['top_engines']:
        print("Detailed VirusTotal Results (Top 10 Engines):")
        for engine in vt_results['top_engines']:
            print(engine)
    
    # File Metadata
    file_metadata = get_file_metadata(file_path)
    print(f"\nFile Metadata:\nFile Size: {file_metadata['file_size']} bytes\nCreation Date: {file_metadata['creation_date']}")

    # Final Risk Level & Recommendation
    if vt_results['malicious'] > 50:
        risk_level = "CRITICAL"
        action = "Severe threat. System compromised. Disconnect immediately."
    elif vt_results['malicious'] > 0:
        risk_level = "HIGH"
        action = "Threat detected. Quarantine the file immediately."
    else:
        heuristic_result = heuristic_analysis(file_metadata)
        if "suspicious" in heuristic_result:
            risk_level = "MEDIUM"
            action = heuristic_result
        else:
            risk_level = "VERY_LOW"
            action = "No action needed."

    print(f"\nFinal Risk Level: {risk_level}")
    print(f"Recommended Action: {action}")

if __name__ == "__main__":
    # Accept just the file name from the user
    file_name = input("Enter the name of the file to scan (e.g., malware.exe): ")
    analyze_file(file_name)