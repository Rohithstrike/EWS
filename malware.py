import os
import hashlib
import yara
import requests
import json
import datetime
import math
import time  # Import time for sleep functionality
import sys  # Import sys for flushing output
import pyfiglet
from termcolor import colored

# Constants
YARA_RULES_PATH = "malware_rules.yar"
VT_API_KEY = "200e69d30ccd0040516d6fefbfa75d9b21c39feb84eeab100d5f1d9f4c0cee04"  # VirusTotal API key
VT_URL = "https://www.virustotal.com/vtapi/v2/file/report"
VT_URL_API = "https://www.virustotal.com/vtapi/v2/url/report"  # VirusTotal URL analysis endpoint
METASCAN_API_KEY = "a70a918591b8c4efb841224032eeee97"  # MetaDefender API key
METASCAN_URL = "https://api.metadefender.com/v4/hash"
FILE_DIRECTORY = "malware/"

banner = pyfiglet.figlet_format("Project Malware X", font="big", width=100)
print(banner)

# Add a function for the loading animation
def loading_animation():
    animation = ["|", "/", "-", "\\"]
    for _ in range(5):
        for frame in animation:
            sys.stdout.write(f"\rLoading {frame}")
            sys.stdout.flush()
            time.sleep(0.2)

def get_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def query_virustotal(file_hash):
    params = {"apikey": VT_API_KEY, "resource": file_hash}
    try:
        response = requests.get(VT_URL, params=params)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 404:
            print("File not found on VirusTotal.")
        else:
            print(f"Error: Received unexpected status code {response.status_code} from VirusTotal.")
    except requests.exceptions.RequestException as e:
        print(f"Error querying VirusTotal: {e}")
    return None

def query_metadefender(file_hash):
    headers = {"apikey": METASCAN_API_KEY, "Content-Type": "application/json"}
    try:
        response = requests.get(f"{METASCAN_URL}/{file_hash}", headers=headers)
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        print(f"Error querying MetaDefender: {e}")
        return None

def analyze_virustotal_results(vt_data):
    if not vt_data or vt_data.get("response_code") == 0:
        return {"summary": "Not found on VirusTotal.", "malicious": 0, "undetected": 0, "top_engines": []}
    malicious = vt_data.get("positives", 0)
    total = vt_data.get("total", 0)
    undetected = total - malicious
    top_engines = [f"{scan}: {result['result']}" for scan, result in vt_data.get("scans", {}).items() if result.get("detected")]
    return {"summary": f"Malicious: {malicious}, Undetected: {undetected}", "malicious": malicious, "undetected": undetected, "top_engines": top_engines[:10]}

def analyze_metadefender_results(md_data):
    if not md_data:
        return {"summary": "No results found on MetaDefender.", "malicious": 0, "details": []}
    findings = md_data.get("scan_results", {}).get("total_detected_avs", 0)
    scan_details = md_data.get("scan_results", {}).get("scan_details", {})
    details = [f"{engine.get('engine_name', 'Unknown')}: {engine.get('threat_found', 'No threat found')}" for engine in scan_details.values() if engine.get("threat_found")]
    return {"summary": f"Malicious detections: {findings}", "malicious": findings, "details": details[:10]}

def get_file_metadata(file_path):
    file_size = os.path.getsize(file_path)
    creation_time = os.path.getctime(file_path)
    creation_date = datetime.datetime.fromtimestamp(creation_time)
    return {"file_size": file_size, "creation_date": creation_date}

def calculate_entropy(file_path):
    with open(file_path, 'rb') as f:
        byte_arr = list(f.read())
        file_size = len(byte_arr)
        if file_size == 0:
            return 0.0
        freq_list = [byte_arr.count(b) / file_size for b in range(256)]
        entropy = -sum(freq * math.log(freq, 2) for freq in freq_list if freq > 0)
        return entropy

def heuristic_analysis(file_metadata, entropy):
    file_size = file_metadata["file_size"]
    if file_size < 10:
        return "File is too small. Likely benign."
    elif file_size < 100:
        return "File size unusually small. Suspicious."
    elif entropy > 7.0:
        return "High entropy detected. Possible obfuscation."
    elif file_size > 1000000:
        return "Large file size. Might be packed or contain additional data."
    else:
        return "No immediate heuristic concerns."
    
def yara_analysis(file_path):
    try:
        rules = yara.compile(YARA_RULES_PATH)
        matches = rules.match(file_path)
        if matches:
            return f"YARA Rule Matches: {[match.rule for match in matches]}"
        else:
            return "No YARA rule matches found."
    except yara.SyntaxError as e:  # Corrected exception
        return f"YARA compilation error: {e}"
    except Exception as e:
        return f"Error running YARA analysis: {e}"

def determine_risk_level(vt_results, md_results, yara_results):
    # Set initial risk levels and recommendations
    vt_risk = "LOW"
    md_risk = "LOW"
    yara_risk = "LOW"
    
    # VirusTotal Risk Assessment
    if vt_results and vt_results.get('malicious', 0) > 0:
        vt_risk = "HIGH"
    
    # MetaDefender Risk Assessment
    if md_results and md_results.get('malicious', 0) > 0:
        md_risk = "MEDIUM"
    
    # YARA Risk Assessment
    if yara_results and 'matches' in yara_results and len(yara_results['matches']) > 0:
        yara_risk = "HIGH"
    
    # Determine final risk level based on priority
    risk_priority = {"LOW": 1, "MEDIUM": 2, "HIGH": 3}
    final_risk = max(vt_risk, md_risk, yara_risk, key=lambda x: risk_priority[x])

    # Final recommendation based on the highest risk level
    final_recommendation = {
        "HIGH": "Immediate action recommended.",
        "MEDIUM": "Moderate action recommended.",
        "LOW": "No immediate action needed."
    }[final_risk]
    
    return final_risk, final_recommendation


def get_dynamic_summary_and_recommendations(risk_level):
    # Define detailed summaries and recommendations based on risk level
    if risk_level == "HIGH":
        summary = (
            "This file has been flagged with high-risk indicators, suggesting it may be highly malicious. "
            "It shows characteristics often associated with malware, such as obfuscation, high entropy (suggesting encryption), "
            "and multiple detections from reputable threat intelligence sources."
        )
        actions = (
            "- Isolate and remove the file immediately from your environment to prevent further spread.\n"
            "- Run a comprehensive system scan with updated antivirus and antimalware definitions to check for any "
            "additional infected files or modifications.\n"
            "- Monitor network traffic closely for signs of suspicious outbound connections or lateral movement.\n"
            "- Patch any security vulnerabilities that could be exploited by this malware, such as unpatched software or open network ports.\n"
            "- Review user accounts and permissions to ensure there has been no unauthorized access or privilege escalation."
        )

    elif risk_level == "MEDIUM":
        summary = (
            "This file displays moderate risk indicators. Although it may not exhibit the overtly malicious traits "
            "seen in high-risk files, it still warrants caution due to some suspicious behavior or partial detections. "
            "Further investigation is recommended to confirm whether it poses a real threat."
        )
        actions = (
            "- Quarantine the file to prevent it from executing or making unauthorized changes while further analysis is performed.\n"
            "- Perform a targeted malware scan on the file and surrounding directories with up-to-date definitions.\n"
            "- Monitor network activity for any unusual or unexpected connections associated with this file.\n"
            "- Review system logs to identify any unusual patterns, such as repeated access attempts, unexpected file modifications, "
            "or connections to known command-and-control servers.\n"
            "- Assess recent user activity for any suspicious or unrecognized actions involving this file."
        )

    else:  # Low risk
        summary = (
            "This file appears to be low-risk based on current analysis. There are no significant indicators of malicious behavior, "
            "and it seems unlikely to pose an immediate threat. However, ongoing monitoring and routine checks are advised."
        )
        actions = (
            "- Monitor the file periodically as a precaution, watching for any unexpected changes or suspicious activity.\n"
            "- Run a routine malware scan during regular security maintenance to ensure it remains benign.\n"
            "- Verify the fileâ€™s origin if not already confirmed, to ensure it came from a trusted source and has not been altered."
        )

    return summary, actions

def analyze_file(file_name):
    file_path = os.path.join(FILE_DIRECTORY, file_name.strip())
    
    # Check if the file exists
    if not os.path.exists(file_path):
        print(f"\033[91mFile not found: {file_path}\033[0m")
        return

    loading_animation()

    # Stage 1: File Analysis
    print("\033[96m\n--- Stage 1: File Analysis ---\033[0m")
    print("=" * 40)
    print(f"\033[93mScanning file:\033[0m {file_path}")

    # Get file hash and basic analysis results
    file_hash = get_file_hash(file_path)
    print(f"\033[94mFile hash:\033[0m {file_hash}")

    vt_data, md_data = None, None
    if os.path.getsize(file_path) > 0:
        try:
            vt_data = query_virustotal(file_hash)
            md_data = query_metadefender(file_hash)
        except Exception as e:
            print(f"\033[91mError querying VirusTotal or MetaDefender: {str(e)}\033[0m")

    vt_results = analyze_virustotal_results(vt_data) if vt_data else {"malicious": 0}
    md_results = analyze_metadefender_results(md_data) if md_data else {"malicious": 0}

    file_metadata = get_file_metadata(file_path)
    entropy = calculate_entropy(file_path)
    yara_result = yara_analysis(file_path)

        # Stage 2: VirusTotal Results
    time.sleep(3)
    print("\033[96m\n--- Stage 2: VirusTotal Results ---\033[0m")
    print("=" * 40)
    print(f"\033[93mVirusTotal Summary:\033[0m {vt_results['summary']}")
    if vt_results['top_engines']:
        print("\033[93mVirusTotal Top Engines:\033[0m\n" + "\n".join(f"\033[91m{engine}\033[0m" for engine in vt_results['top_engines']))

    # Stage 3: MetaDefender Results
    time.sleep(3)
    print("\033[96m\n--- Stage 3: MetaDefender Results ---\033[0m")
    print("=" * 40)
    print(f"\033[93mMetaDefender Summary:\033[0m {md_results['summary']}")
    if md_results['details']:
        print("\033[93mMetaDefender Details:\033[0m\n" + "\n".join(f"\033[91m{detail}\033[0m" for detail in md_results['details']))
    
    # Stage 4: YARA Analysis
    time.sleep(3)
    print("\033[96m\n--- Stage 4: YARA Analysis ---\033[0m")
    print("=" * 40)
    print(f"\033[93mYARA Results:\033[0m {yara_result}")

    time.sleep(1)
    print("\033[96m\n--- Heuristic Analysis ---\033[0m")
    print("=" * 40)
    print(f"\033[93mEntropy:\033[0m {entropy}")


    # Stage 6: Risk Level Determination
    risk_level, recommendation = determine_risk_level(vt_results, md_results, yara_result)
    analysis_summary, recommended_actions = get_dynamic_summary_and_recommendations(risk_level)
    
    # Display the risk level and recommendations
    print("\033[96m\n--- Risk Level ---\033[0m")
    print("=" * 40)
    print(f"\033[93mRisk Level:\033[0m {risk_level}")
    print(f"\033[93mRecommendation:\033[0m {recommendation}")

    # Final Summary of Actions and Malware Analysis
    print("\033[96m\n--- Final Summary ---\033[0m")
    print("=" * 40)
    print("\033[1m\033[94mMalware Analysis Summary:\033[0m")
    print(f"\033[91m{analysis_summary}\033[0m")
    print("=" * 40)
    print(recommended_actions)
    print("=" * 40)


if __name__ == "__main__":
    choice = input("Choose analysis type (1 for Malware File, 2 for Malicious URL): ")
    if choice == "1":
        file_name_input = input("Enter the file name to analyze (in malware directory): ")
        analyze_file(file_name_input)
    elif choice == "2":
        url_input = input("Enter the URL to analyze: ")
        analyze_url(url_input)
    else:
        print("Invalid choice. Exiting.")